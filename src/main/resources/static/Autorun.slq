DROP DATABASE IF EXISTS station;

CREATE DATABASE station;

\c station

CREATE TABLE Station(
   station_id INT PRIMARY KEY,
   location VARCHAR(200) NOT NULL,
   coordinates VARCHAR(250)
);

CREATE TABLE Product_template(
   template_id INT PRIMARY KEY,
   price DECIMAL(15,2),
   name VARCHAR(200)
);


CREATE TABLE Product(
   product_id INT PRIMARY KEY,
   station_id INT REFERENCES Station(station_id),
   template_id INT REFERENCES ProductTemplate(template_id),
   stock_product DECIMAL
);

CREATE TABLE MovementStock(
   movement_id INT PRIMARY KEY,
   type_movement TEXT CHECK (type_movement IN ('Input', 'Output')),
   quantity DOUBLE PRECISION,
   quantity_type TEXT CHECK (quantity_type IN ('liter', 'money')),
   date_movement TIMESTAMP,
   station_id INT REFERENCES Station(station_id),
   product_id INT REFERENCES Product(product_id)
);

Create Table StockHistory(
 history_id SERIAL  primary key ,
 product_id INT REFERENCES ProductTemplate(template_id),
 movement_id INT REFERENCES MovementStock(movement_id),
 remaining_quantities DOUBLE PRECISION,
 date_movement TIMESTAMP
);

CREATE OR REPLACE FUNCTION save_history_stock(
    in_product_id INT,
    in_movement_id INT,
    in_remaining_quantities INT,
    in_date_movement TIMESTAMP
)
RETURNS INT AS $$
BEGIN
    INSERT INTO StockHistory (product_id, movement_id, remaining_quantities, date_movement)
    VALUES (in_product_id, in_movement_id, in_remaining_quantities, in_date_movement);

    RETURN (SELECT currval(pg_get_serial_sequence('StockHistory', 'history_id')));
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE VIEW StockSummary AS
SELECT
    SH.date_movement AS "Date",
    COALESCE(SUM(CASE WHEN PT.name = 'Gasoline' AND MS.type_movement = 'Input' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté ajoutée Essence",
    COALESCE(SUM(CASE WHEN PT.name = 'Diesel' AND MS.type_movement = 'Input' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté ajoutée Gasoil",
    COALESCE(SUM(CASE WHEN PT.name = 'Oil' AND MS.type_movement = 'Input' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté ajoutée Pétrole",
    COALESCE(SUM(CASE WHEN PT.name = 'Gasoline' AND MS.type_movement = 'Output' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté vendue Essence",
    COALESCE(SUM(CASE WHEN PT.name = 'Diesel' AND MS.type_movement = 'Output' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté vendue Gasoil",
    COALESCE(SUM(CASE WHEN PT.name = 'Oil' AND MS.type_movement = 'Output' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté vendue Pétrole",
    COALESCE(SUM(CASE WHEN PT.name = 'Gasoline' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté restante Essence",
    COALESCE(SUM(CASE WHEN PT.name = 'Diesel' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté restante Gasoil",
    COALESCE(SUM(CASE WHEN PT.name = 'Oil' THEN SH.remaining_quantities ELSE 0 END), 0) AS "Qté restante Pétrole"
FROM
    StockHistory SH
LEFT JOIN
    MovementStock MS ON SH.movement_id = MS.movement_id
LEFT JOIN
    ProductTemplate PT ON SH.product_id = PT.template_id
WHERE
    SH.date_movement BETWEEN ? AND ?
GROUP BY
    SH.date_movement
ORDER BY
    SH.date_movement;
